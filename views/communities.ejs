<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"
    />
    <link rel="stylesheet" href="./css/navbar.css" />
    <link rel="stylesheet" href="./css/communities.css" />
    <link rel="shortcut icon" href="img/core.png" />
    <title>CORE - Communities</title>
  </head>
  <body>
    <%- include('partials/navbar', { pagePath: 'communities' }) %>

    <div class="container">
      
    <div id="com-btn-container" class="column">
      <h4>Communities</h4>
      <a href="#" onclick="filterPosts('All')">All</a>
      <a href="#" onclick="filterPosts('ML-AI')">ML-AI</a>
      <a href="#" onclick="filterPosts('Web-Dev')">Web Development</a>
      <a href="#" onclick="filterPosts('cs')">Computer Science</a>
      <a href="#" onclick="filterPosts('Programming')">Software</a>

      <h4>Recent Posts</h4>

      <h4>Recent Jobs</h4>
    </div>

    <div id="posts-container" class="column">
    </div>
      <% const jobPostings = [
        {
          companyName: "Apple",
          jobTitle: "Security Analyst",
          jobLocation: "Boston, MA",
          jobOverview: "Protect our digital assets and ensure compliance with the latest security standards.",
          jobType: "Full-Time",
          jobSalary: "$115k/yr",
          jobBenefits: "Health & Dental, Company Subscriptions, Paid Time Off",
          companyLogo: "./src/applelogo.png"
        },
        {
          companyName: "Amazon",
          jobTitle: "Data Scientist",
          jobLocation: "Seattle, WA",
          jobOverview: "Utilize large datasets to uncover insights and inform business strategy decisions.",
          jobType: "Full-Time",
          jobSalary: "$150k/yr",
          jobBenefits: "401k, Flexible Hours, Relocation Assistance",
          
          companyLogo: "./src/amazonlogo.png"
          },
          
          {
          companyName: "Microsoft",
          jobTitle: "Software Engineer",
          jobLocation: "Redmond, WA",
          jobOverview: "Design, build and manage cloud-based products using cutting edge technology.",
          
          jobType: "Full-Time",
          jobSalary: "$130k/yr",
          jobBenefits: "Unlimited PTO, Equity Compensation, 401k Matching",
          companyLogo: "./src/microsoftlogo.png"
          },
          
          {
          companyName: "Google",
          jobTitle: "Product Manager",
          
          jobLocation: "Mountain View, CA",
          jobOverview: "Lead cross-functional teams to deliver innovative Google products.",
          jobType: "Full-Time",
          jobSalary: "$160k/yr",
          jobBenefits: "Flexible Work Arrangements, Learning Stipends, Free Meals",
          companyLogo: "./src/googlelogo.png"
          },
      ]; %>
      <div class="jobs-container">
        <% jobPostings.forEach(job => { %>
          <div class="job">
            <div class="job-content">
              <div class="job-header">
                <div class="company-logo-container">
                  <img src="<%= job.companyLogo %>" alt="Company Logo" class="company-logo" />
                </div>
                <div class="job-title-location">
                  <div class="job-header">
                    <div class="company-name"><%= job.companyName %> </div> 
                  </div>
                  <div class="job-title"><%= job.jobTitle %></div>
                </div>
              </div>
              <div class="job-body">
                <div class="job-info"></div>
              </div>
              <div class="job-flairs">
                <span class="job-flair"><%= job.jobType %></span>
                <span class="job-flair"><%= job.jobSalary %></span>
                <span class="job-flair"><%= job.jobLocation %></span>
              </div>
            </div>
          </div>
        <% }); %>
      </div>
    </div>

    <script>

function showLoader() {
    document.getElementById('loadingAnimation').style.display = 'block';
}

function hideLoader() {
    document.getElementById('loadingAnimation').style.display = 'none';
}

      function fetchAndDisplayPosts() {
    fetch('/api/posts') // Adjust this to your server's endpoint
      .then(response => response.json())
      .then(posts => {
        const postsContainer = document.getElementById('posts-container');
        const fetchPromises = [];

        posts.forEach(post => {
          // Main post div
          const postDiv = document.createElement('div');
          postDiv.className = 'post';

          // Post content div
          const postContentDiv = document.createElement('div');
          postContentDiv.className = 'post-content';

          // Post header div
          const postHeaderDiv = document.createElement('div');
          postHeaderDiv.className = 'post-header';

          // avatar div
          const avatarDiv = document.createElement('div');
          avatarDiv.className = 'avatar';
          const avatarImg = document.createElement('img');
          avatarImg.src = post.avatar;
          avatarDiv.appendChild(avatarImg);
          postHeaderDiv.appendChild(avatarDiv);

          // Username, community and current job div
          const usernameDiv = document.createElement('div');
          usernameDiv.className = 'username';
          const usernameLink = document.createElement('a');
          usernameLink.href = '/profile/' + post.username;
          usernameLink.innerHTML = '<strong>' + post.username + '</strong> ';
          usernameDiv.appendChild(usernameLink);

          const communityLink = document.createElement('a');
          communityLink.href = '/communities/' + post.communities_id;
          communityLink.className = 'community';
          communityLink.innerText = "";
          usernameDiv.appendChild(communityLink);
          fetchPromises.push(fetchCommunity(post.communities_id, communityLink));

      

          const currentJobDiv = document.createElement('div');
          currentJobDiv.className = 'current-job';
          currentJobDiv.innerText = post.currentJob ? post.currentJob : 'No job info';
          usernameDiv.appendChild(currentJobDiv);

          postHeaderDiv.appendChild(usernameDiv);

          postContentDiv.appendChild(postHeaderDiv);

          // Title div
          const titleDiv = document.createElement('div');
          titleDiv.className = 'title';
          titleDiv.innerText = post.title;
          titleDiv.onclick = () => window.location.href = '/posts/' + post.id;
          postContentDiv.appendChild(titleDiv);

          if (post.link) {
          const linkDiv = document.createElement('div');
          linkDiv.className = 'link';
          linkDiv.innerHTML = '<div class="placeholder-link-preview">Loading link preview...</div>'; // Placeholder
          postContentDiv.appendChild(linkDiv);
          fetchPromises.push(fetchLinkPreview(post.link, linkDiv));
          }
          const descriptionDiv = document.createElement('div');
          descriptionDiv.className = 'description';
          descriptionDiv.innerText = post.content; // Assuming 'content' holds the description
          postContentDiv.appendChild(descriptionDiv);

// Votes div
const votesDiv = document.createElement("div");
votesDiv.className = "votes";

// Reaction interactions div
const reactionInteractionsDiv = document.createElement("div");
reactionInteractionsDiv.className = "reaction-interactions";

// Reaction buttons
const reactionTypes = [
  { type: "LOVE", icon: "favorite" },
  { type: "LIKE", icon: "thumb_up_alt" },
  { type: "CURIOUS", icon: "help_outline" },
  { type: "INTERESTING", icon: "lightbulb" },
  { type: "CELEBRATE", icon: "celebration" }
];

reactionTypes.forEach(reaction => {
      const button = document.createElement("button");
      button.className = `reaction-button ${reaction.type.toLowerCase()}-button`;
      button.onclick = () => interactWithPost(post.id, "<%= user %>", reaction.type);

      const icon = document.createElement("span");
      icon.className = "material-symbols-outlined";
      icon.innerText = reaction.icon;

      const countText = document.createElement("span");
      countText.className = "reaction-count";
      // Get the count for each reaction type dynamically from the post object
      countText.innerText = ` ${post[reaction.type.toLowerCase() + 'Count'] || 0}`;

      button.appendChild(icon);
      button.appendChild(countText);
      reactionInteractionsDiv.appendChild(button);
    });


votesDiv.appendChild(reactionInteractionsDiv);
postContentDiv.appendChild(votesDiv);


        
              const tagsDiv = document.createElement('div');
        tagsDiv.className = 'tags';
        tagsDiv.innerHTML = 'Loading tags...'; // Placeholder
        tagsDiv.style = 'font-size: 12px;';
        votesDiv.appendChild(tagsDiv);
        fetchPromises.push(fetchTags(post.id, tagsDiv));


        const commentsDiv = document.createElement('div');
        commentsDiv.className = 'comments';
        commentsDiv.innerHTML = 'Loading comments...'; // Placeholder
        votesDiv.appendChild(commentsDiv);
        fetchPromises.push(fetchComments(post.id, commentsDiv));
        

          postDiv.appendChild(postContentDiv);
          postsContainer.appendChild(postDiv);
        });
        return Promise.all(fetchPromises);

      })
      .catch(error => console.error('Error fetching posts:', error));
  }

  function fetchCommunity(community_id, container) {
  return fetch(`/api/communities/${community_id}`)
    .then(response => response.json())
    .then(community => {
      container.innerHTML = " in " + community.name;
    });
}

  function fetchTags(post_id, container) {
  return fetch(`/api/tags/${post_id}`)
    .then(response => response.json())
    .then(tags => {
      container.innerHTML = tags.map(tag => `<span id="post-flair">${tag.name}</span>`).join(' ');
    });
  }

  function fetchLinkPreview(link, container) {
  return fetch(`/api/link-preview/${encodeURIComponent(encodeURIComponent(link))}`)
    .then(response => response.json())
    .then(linkPreview => {
      if (linkPreview) {
        let imageUrl = linkPreview.image || linkPreview.favicon;
        let htmlContent = `
          <div class="mini-link">
              <div class="mini-link-image">
                  ${imageUrl ? `<img src="${imageUrl}" alt="thumbnail" class="thumbnail-image" />` : ''}
              </div>
              <div class="mini-link-body">
                  <div class="mini-link-title">${linkPreview.title || ''}</div>
                  <div class="mini-link-url">${link || ''}</div>
                  <div class="mini-link-desc">${linkPreview.description || ''}</div>
              </div>
          </div>`;
        container.innerHTML = htmlContent;
      }
    });
}
function fetchComments(postId, container) {
  return fetch(`/api/comments/${postId}`)
    .then(response => response.json())
    .then(comments => {
      container.innerHTML = comments.length + ' replies'; 
    });
}

  function formatDate(date) {
    let postDate = new Date(date);
    let today = new Date();
    let formattedDate;
          
   // Calculate time difference in milliseconds
            let diff = today - postDate;
          
            // Convert time difference to different units
            let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
            let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
            let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day
            let years = Math.floor(diff / 31536000000); // 31,536,000,000 milliseconds in a year
          
            // Decide the format based on the time difference
            if (minutes < 60) {
              formattedDate = minutes + ' minutes ago';
            } else if (hours < 24) {
              formattedDate = hours + ' hours ago';
            } else if (days < 365) {
              formattedDate = days + ' days ago';
            } else {
              formattedDate = years + ' years ago';
            }
            return formattedDate;
  }
  
  document.addEventListener("DOMContentLoaded", fetchAndDisplayPosts);

  function interactWithPost(postId, user, action) {
  if (!user) {
    window.location.href = '/login';
    return;
  }

  fetch(`/posts/${postId}/react`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ user: user, action: action.toLowerCase() }) // Ensure action is in lowercase
  })
  .then(response => response.json())
  .then(data => {
    // Update reaction counts
    Object.keys(data.reactions).forEach(reactionType => {
      const reactionButton = document.querySelector(`[onclick="interactWithPost('${postId}', '${user}', '${reactionType.toLowerCase()}')"]`);
      if (reactionButton) {
        const icon = reactionButton.getElementsByTagName('span')[0];
        const count = reactionButton.getElementsByTagName('span')[1];
        count.innerText = ` ${data.reactions[reactionType] || 0}`;
        
        // Update button color if needed
        if (reactionType.toLowerCase() === action.toLowerCase()) {
          reactionButton.style.color = "blue"; // Change color to indicate selected action
        } else {
          reactionButton.style.color = "black"; // Reset color for other buttons
        }
      }
    });
  })
  .catch((error) => {
    console.error('Error:', error);
  });
}



function filterPosts(communityName) {
    // Get all post elements
    const posts = document.querySelectorAll('.post');
    posts.forEach((post) => {
        // Check if post belongs to the selected community
        const postCommunity = post.querySelector('.communities_id').textContent.trim();
        if (communityName === 'All' || postCommunity === communityName) {
            post.style.display = ''; // Show post
        } else {
            post.style.display = 'none'; // Hide post
        }
    });
}

// Call the function to create buttons on page load
createButtons();

    </script>
  </body>
</html>
