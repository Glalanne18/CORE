<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"
    />
    <link rel="stylesheet" href="./css/navbar.css" />
    <link rel="stylesheet" href="./css/communities.css" />
  </head>
  <body>
    <%- include('partials/navbar', { pagePath: 'communities' }) %>

    <div id="com-btn-container">
      <button class="create-post-btn" onclick="window.location.href='/post/create';">
        <span class="material-symbols-outlined"> create </span> Create Post
    </div>

    <div id="posts-container">
      <% posts.forEach(post => { %>
      <div class="post">
        <div class="votes">
          <div id="post-boosts-<%= post.id %>">
            <%= post.boosts %>
          </div>
          <span class="material-symbols-outlined" onclick="boostPost('<%= post.id %>', '<%= user %>')"> trending_up </span>
          <div id="post-detracts-<%= post.id %>">
          <%= post.detracts %>
          </div>
          <span class="material-symbols-outlined" onclick="detractPost('<%= post.id %>', '<%= user %>')"> trending_down </span>        
        </div>
        <div class="thumbnail" onclick="window.location.href='/posts/<%= post.id %>';">
          <img
            src="/thumbnail_image_url.jpg"
            alt="Thumbnail Image"
            class="thumbnail-image"
          />
        </div>
        <div class="post-content" onclick="window.location.href='/posts/<%= post.id %>';">
          <div class="title">
            <strong><%= post.username %></strong> / <%= post.title %>
          </div>
          <div class="post-date">
          <% 
          let postDate = new Date(post.created_at);
          let today = new Date();
          let formattedDate;
        
          let timeOptions = { hour: '2-digit', minute: '2-digit' };
        
          if(postDate.toDateString() === today.toDateString()) {
            formattedDate = `Today, ${postDate.toLocaleTimeString(undefined, timeOptions)}`;
          } else {
            formattedDate = `${postDate.toLocaleDateString()}, ${postDate.toLocaleTimeString(undefined, timeOptions)}`;
          }
        %>
        <%= formattedDate %>
        </div>
            <div class="description"><%= post.content %></div>
        </div>
      </div>
      <% }); %>
    </div>

    <script>
function detractPost(postId, user) {
  fetch(`/posts/${postId}/boost`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ user: user, action: "detract" })
  })
  .then(response => response.json())
  .then(data => {
    console.log(data); // Console log the JSON response
    if (data.message === "Detract successful") {
      // Increase the detract count in the view
      const detractCountElement = document.getElementById(`post-detracts-${postId}`);
      detractCountElement.innerText = parseInt(detractCountElement.innerText) + 1;

      // Change color of trending down arrow
      const trendingDownElement = document.querySelector(`[onclick="detractPost('${postId}', '${user}')"]`);
      trendingDownElement.style.color = "red";

      // Check if the post was boosted by the user
      const boostCountElement = document.getElementById(`post-boosts-${postId}`);
      if (boostCountElement.innerText > 0) {
        const trendingUpElement = document.querySelector(`[onclick="boostPost('${postId}', '${user}')"]`);
      trendingUpElement.style.color = "black";
              boostCountElement.innerText = parseInt(boostCountElement.innerText) - 1;
      }
    } else if (data.message === "Detract removed") {
      // Decrease the detract count in the view
      const detractCountElement = document.getElementById(`post-detracts-${postId}`);
      detractCountElement.innerText = parseInt(detractCountElement.innerText) - 1;

      // Change color of trending down arrow back to black
      const trendingDownElement = document.querySelector(`[onclick="detractPost('${postId}', '${user}')"]`);
      trendingDownElement.style.color = "black";
    } else {
      // Handle error
    }
  })
  .catch((error) => {
    console.error('Error:', error);
  });
}

function boostPost(postId, user) {
  fetch(`/posts/${postId}/boost`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ user: user, action: "boost" })
  })
  .then(response => response.json())
  .then(data => {
    console.log(data); // Console log the JSON response
    if (data.message === "Boost successful") {
      // Increase the boost count in the view
      const boostCountElement = document.getElementById(`post-boosts-${postId}`);
      boostCountElement.innerText = parseInt(boostCountElement.innerText) + 1;

      // Change color of trending up arrow
      const trendingUpElement = document.querySelector(`[onclick="boostPost('${postId}', '${user}')"]`);
      trendingUpElement.style.color = "green";

      // Check if the post was detracted by the user
      const detractCountElement = document.getElementById(`post-detracts-${postId}`);
      if (detractCountElement.innerText > 0) {
        // Decrease the detract count in the view
        const trendingDownElement = document.querySelector(`[onclick="detractPost('${postId}', '${user}')"]`);
      trendingDownElement.style.color = "black";
        detractCountElement.innerText = parseInt(detractCountElement.innerText) - 1;
      }
    } else if (data.message === "Boost removed") {
      // Decrease the boost count in the view
      const boostCountElement = document.getElementById(`post-boosts-${postId}`);
      boostCountElement.innerText = parseInt(boostCountElement.innerText) - 1;

      // Change color of trending up arrow back to black
      const trendingUpElement = document.querySelector(`[onclick="boostPost('${postId}', '${user}')"]`);
      trendingUpElement.style.color = "black";
    } else {
      // Handle error
    }
  })
  .catch((error) => {
    console.error('Error:', error);
  });
}

  const communities = [
        { name: "trending", icon: "trending_up" },
        { name: "new", icon: "schedule" },
        { name: "explore", icon: "public" },
        { name: "general", icon: "groups" },
        { name: "ml-ai", icon: "robot" },
        { name: "it-tech", icon: "developer_board" },
        { name: "web-dev", icon: "web" },
        { name: "cybersecurity", icon: "admin_panel_settings" },
        { name: "game-dev", icon: "sports_esports" },
        { name: "ios-dev", icon: "ios" },
        { name: "android-dev", icon: "android" },
        { name: "data-science", icon: "monitoring" },
        { name: "web3", icon: "currency_bitcoin" },
        { name: "cloud", icon: "cloud" },
        { name: "devops", icon: "settings" },
        { name: "AI-ethics", icon: "volunteer_activism" },
        { name: "UX-design", icon: "design_services" },
        { name: "software-testing", icon: "check_circle" },
        { name: "agile-development", icon: "scatter_plot" },
        // add more communities as needed
      ];

      function createButtons() {
        const container = document.getElementById("com-btn-container");

        communities.forEach((community) => {
          const button = document.createElement("button");
          button.className = "com-btn";
          button.setAttribute("data-community", community.name);

          const span = document.createElement("span");
          span.className = "material-symbols-outlined";
          span.textContent = community.icon;

          button.appendChild(span);
          button.appendChild(
            document.createTextNode(
              ` ${community.name.replace(/-/g, " ").toUpperCase()}`
            )
          );

          container.appendChild(button);
        });
      }
      

      // Call the function to create buttons on page load
      createButtons();
    </script>
  </body>
</html>
