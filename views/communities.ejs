<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"
    />
    <link rel="stylesheet" href="./css/navbar.css" />
    <link rel="stylesheet" href="./css/communities.css" />
    <link rel="shortcut icon" href="img/core.png" />
    <title>CORE - Communities</title>
  </head>
  <body>
    <%- include('partials/navbar', { pagePath: 'communities' }) %>

    <div class="container">
      
    <div id="com-btn-container" class="column">
      <button class="create-post-btn" onclick="window.location.href='/post/create';">
        <span class="material-symbols-outlined"> add </span>
    </div>

    <div id="posts-container" class="column">
      <% posts.forEach(post => { %>
      <div class="post">
        <div class="votes">
          <div class="vote-interactions">
            <span class="material-symbols-outlined boost-button" onclick="boostPost('<%= post.id %>', '<%= user %>')" <% if (user && post.userInteractions === 'B') { %>style="color: green;"<% } %>>arrow_upward_alt</span>
            <div id="posts-score-<%= post.id %>">
                <%= post.boosts - post.detracts %>
            </div>

            <span class="material-symbols-outlined detract-button" onclick="detractPost('<%= post.id %>', '<%= user %>')" <% if (user && post.userInteractions === 'D') { %>style="color: red;"<% } %>>arrow_downward_alt</span>
          </div>     
        </div>
        <div class="post-content" onclick="window.location.href='/posts/<%= post.id %>';">
          <div class="post-header">
          <div class="username">
            <a href="/profile/<%= post.username %>"><strong><%= post.username %></strong></a>
          </div>
          <div class="timestamp">
            <%
            let postDate = new Date(post.created_at);
            let today = new Date();
            let formattedDate;
          
            // Calculate time difference in milliseconds
            let diff = today - postDate;
          
            // Convert time difference to different units
            let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
            let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
            let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day
            let years = Math.floor(diff / 31536000000); // 31,536,000,000 milliseconds in a year
          
            // Decide the format based on the time difference
            if (minutes < 60) {
              formattedDate = minutes + ' minutes ago';
            } else if (hours < 24) {
              formattedDate = hours + ' hours ago';
            } else if (days < 365) {
              formattedDate = days + ' days ago';
            } else {
              formattedDate = years + ' years ago';
            }
          %>
          <%= formattedDate %>
          </div>
          </div>
          <div class="title">
            <%= post.title %>
          </div>
          <div class="link"> 
              <% if (post.link && post.linkPreview) { %>
                <div class="mini-link" >
                  <div class="mini-link-image">
                    <% if (post.linkPreview) { %>
                      <% let imageUrl = post.linkPreview.image || post.linkPreview.favicon; %> 
                      <% if (imageUrl) { %> 
                        <img src="<%= imageUrl %>" alt="thumbnail" class="thumbnail-image" />
                    <% } %>
                    <% } else { %>
                    <img
                      src="/thumbnail_image_url.jpg"
                      alt="Thumbnail Image"
                      class="thumbnail-image"
                    />
                    
                    <% } %>
                  </div>
                  <div class="mini-link-body">
                    <div class="mini-link-title">
                      <%= post.linkPreview.title %>
                    </div>
                    <div class="mini-link-url">
                      <%= post.link %>
                    </div>
                    <div class="mini-link-desc">
                      <%= post.linkPreview.description %>
    
                    </div>
                  </div>

              </div>

              <% } %>
          </div>
          <div class="description">
            <%= post.content %>
          </div>
          <div class="comments">
            <%= post.comments.length %> replies 
          </div>
        </div>
      </div>
      <% }); %>
    </div>
      <% const jobPostings = [
        {
          companyName: "Apple",
          jobTitle: "Security Analyst",
          jobLocation: "Boston, MA",
          jobOverview: "Protect our digital assets and ensure compliance with the latest security standards.",
          jobType: "Full-Time",
          jobSalary: "$115k/yr",
          jobBenefits: "Health & Dental, Company Subscriptions, Paid Time Off",
          companyLogo: "./src/applelogo.png"
        },
        {
          companyName: "Amazon",
          jobTitle: "Data Scientist",
          jobLocation: "Seattle, WA",
          jobOverview: "Utilize large datasets to uncover insights and inform business strategy decisions.",
          jobType: "Full-Time",
          jobSalary: "$150k/yr",
          jobBenefits: "401k, Flexible Hours, Relocation Assistance",
          
          companyLogo: "./src/amazonlogo.png"
          },
          
          {
          companyName: "Microsoft",
          jobTitle: "Software Engineer",
          jobLocation: "Redmond, WA",
          jobOverview: "Design, build and manage cloud-based products using cutting edge technology.",
          
          jobType: "Full-Time",
          jobSalary: "$130k/yr",
          jobBenefits: "Unlimited PTO, Equity Compensation, 401k Matching",
          companyLogo: "./src/microsoftlogo.png"
          },
          
          {
          companyName: "Google",
          jobTitle: "Product Manager",
          
          jobLocation: "Mountain View, CA",
          jobOverview: "Lead cross-functional teams to deliver innovative Google products.",
          jobType: "Full-Time",
          jobSalary: "$160k/yr",
          jobBenefits: "Flexible Work Arrangements, Learning Stipends, Free Meals",
          companyLogo: "./src/googlelogo.png"
          },
      ]; %>
      <div class="jobs-container">
        <% jobPostings.forEach(job => { %>
          <div class="job">
            <div class="job-content">
              <div class="job-header">
                <div class="company-logo-container">
                  <img src="<%= job.companyLogo %>" alt="Company Logo" class="company-logo" />
                </div>
                <div class="job-title-location">
                  <div class="job-header">
                    <div class="company-name"><%= job.companyName %> </div> 
                    <div class="job-location">
                      <%= job.jobLocation %>
                    </div>
                  </div>
                  <div class="job-title"><%= job.jobTitle %></div>
                </div>
              </div>
              <div class="job-body">
                <div class="job-info"><%= job.jobType %> / <%= job.jobSalary %></div>
              </div>
            </div>
          </div>
        <% }); %>
      </div>
    </div>

    <script>

function detractPost(postId, user) {
  if (!user) {
    window.location.href = '/login'; // Redirect to the login page
    return; 
  }
  fetch(`/posts/${postId}/boost`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ user: user, action: "detract" })
  })
  .then(response => response.json())
  .then(data => {
    console.log(data); // Console log the JSON response
    if (data.message === "Detract successful") {
      // Increase the detract count in the view
      const detractCountElement = document.getElementById(`posts-score-${postId}`);
      detractCountElement.innerText = data.newScore;

      // Change color of trending down arrow
      const trendingDownElement = document.querySelector(`[onclick="detractPost('${postId}', '${user}')"]`);
      trendingDownElement.style.color = "red";

      // Check if the post was boosted by the user
      const boostCountElement = document.getElementById(`posts-score-${postId}`);
      if (boostCountElement.innerText > 0) {
        const trendingUpElement = document.querySelector(`[onclick="boostPost('${postId}', '${user}')"]`);
      trendingUpElement.style.color = "black";
              boostCountElement.innerText = data.newScore;
      }
    } else if (data.message === "Detract removed") {
      // Decrease the detract count in the view
      const detractCountElement = document.getElementById(`posts-score-${postId}`);
      detractCountElement.innerText = data.newScore;

      // Change color of trending down arrow back to black
      const trendingDownElement = document.querySelector(`[onclick="detractPost('${postId}', '${user}')"]`);
      trendingDownElement.style.color = "black";
    } else {
      // Handle error
    }
  })
  .catch((error) => {
    console.error('Error:', error);
  });
}

function boostPost(postId, user) {
  if (!user) {
    window.location.href = '/login'; // Redirect to the login page
    return; // Stop further execution
  }
  fetch(`/posts/${postId}/boost`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ user: user, action: "boost" })
  })
  .then(response => response.json())
  .then(data => {
    console.log(data); // Console log the JSON response
    if (data.message === "Boost successful") {
      // Increase the boost count in the view
      const boostCountElement = document.getElementById(`posts-score-${postId}`);
      boostCountElement.innerText = data.newScore;

      // Change color of trending up arrow
      const trendingUpElement = document.querySelector(`[onclick="boostPost('${postId}', '${user}')"]`);
      trendingUpElement.style.color = "green";

      // Check if the post was detracted by the user
      const detractCountElement = document.getElementById(`posts-score-${postId}`);
      if (detractCountElement.innerText > 0) {
        // Decrease the detract count in the view
        const trendingDownElement = document.querySelector(`[onclick="detractPost('${postId}', '${user}')"]`);
      trendingDownElement.style.color = "black";
        detractCountElement.innerText = data.newScore;
      }
    } else if (data.message === "Boost removed") {
      // Decrease the boost count in the view
      const boostCountElement = document.getElementById(`posts-score-${postId}`);
      boostCountElement.innerText = data.newScore;

      // Change color of trending up arrow back to black
      const trendingUpElement = document.querySelector(`[onclick="boostPost('${postId}', '${user}')"]`);
      trendingUpElement.style.color = "black";
    } else {
      // Handle error
    }
  })
  .catch((error) => {
    console.error('Error:', error);
  });
}

  const communities = [
        { name: "All", icon: "schedule" },
        { name: "General", icon: "groups" },
        { name: "ML/AI", icon: "robot" },
        { name: "IT", icon: "developer_board" },
        { name: "Robotics", icon: "web" },
        { name: "Game-Dev", icon: "sports_esports" },
      ];

      function createButtons() {
    const container = document.getElementById("com-btn-container");

    communities.forEach((community) => {
        const button = document.createElement("button");

        // Add icon
        const icon = document.createElement("span");
        icon.className = "material-symbols-outlined";
        icon.appendChild(document.createTextNode(community.icon));
        button.appendChild(icon);
        
        button.className = "com-btn";
        button.setAttribute("data-community", community.name);
        button.appendChild(document.createTextNode(` ${community.name.replace(/-/g, " ")}`));
        button.addEventListener('click', function() { filterPosts(community.name); });
        container.appendChild(button);
    });
}

function filterPosts(communityName) {
    // Get all post elements
    const posts = document.querySelectorAll('.post');
    posts.forEach((post) => {
        // Check if post belongs to the selected community
        const postCommunity = post.querySelector('.communities_id').textContent.trim();
        if (communityName === 'All' || postCommunity === communityName) {
            post.style.display = ''; // Show post
        } else {
            post.style.display = 'none'; // Hide post
        }
    });
}

// Call the function to create buttons on page load
createButtons();

    </script>
  </body>
</html>
