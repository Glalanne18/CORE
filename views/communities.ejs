<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"
    />
    <link rel="stylesheet" href="./css/navbar.css" />
    <link rel="stylesheet" href="./css/communities.css" />
    <link rel="shortcut icon" href="img/core.png" />
  </head>
  <body>
    <%- include('partials/navbar', { pagePath: 'communities' }) %>

    <div id="com-btn-container">
      <button class="create-post-btn" onclick="window.location.href='/post/create';">
        <span class="material-symbols-outlined"> add </span>
    </div>

    <div id="posts-container">
      <% posts.forEach(post => { %>
      <div class="post">
        <div class="votes">

          <span class="material-symbols-outlined" id="boost-button" onclick="boostPost('<%= post.id %>', '<%= user %>')"> arrow_upward_alt </span>
          <div id="post-score-<%= post.id %>">
            <span class="score">
              <%= post.boosts - post.detracts %>
            </span>
            
          </div>
          <span class="material-symbols-outlined" id="detract-button" onclick="detractPost('<%= post.id %>', '<%= user %>')"> arrow_downward_alt </span>        
        </div>
        <div class="thumbnail" onclick="window.location.href='/posts/<%= post.id %>';">
          <% if (post.linkPreview) { %>
            <% let imageUrl = post.linkPreview.image || post.linkPreview.favicon; %> 
            <% if (imageUrl) { %> 
              <img src="<%= imageUrl %>" alt="thumbnail" />
          <% } %>
          <% } else { %>
          <img
            src="/thumbnail_image_url.jpg"
            alt="Thumbnail Image"
            class="thumbnail-image"
          />
          
          <% } %>
        </div>
        <div class="post-content" onclick="window.location.href='/posts/<%= post.id %>';">
          <div class="title">
            <%= post.title %>
          </div>
          <div class="link"> 
            <% if (post.link) { %>
              <%= post.link %>
            <% } %>
          </div>
          <div class="description">
            <%= post.content %>
          </div>
            
          <div class="post-info">
            <div class="communities_id">
              <%= post.community.name %>
            </div>
            <span class="material-symbols-outlined" id="user-icon"> person </span>
            <strong><%= post.username %></strong>
            <span class="material-symbols-outlined" id="score-icon"> sentiment_satisfied </span>
            <%= post.score %>
            <span class="material-symbols-outlined" id="comments-icon"> comment </span>
          <%= post.comments.length %>
            <span class="material-symbols-outlined" id="date-icon"> schedule </span>
            
            <%
            let postDate = new Date(post.created_at);
            let today = new Date();
            let formattedDate;
          
            // Calculate time difference in milliseconds
            let diff = today - postDate;
          
            // Convert time difference to different units
            let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
            let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
            let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day
            let years = Math.floor(diff / 31536000000); // 31,536,000,000 milliseconds in a year
          
            // Decide the format based on the time difference
            if (minutes < 60) {
              formattedDate = minutes + ' minutes ago';
            } else if (hours < 24) {
              formattedDate = hours + ' hours ago';
            } else if (days < 365) {
              formattedDate = days + ' days ago';
            } else {
              formattedDate = years + ' years ago';
            }
          %>
          <%= formattedDate %>
          
        </div>
        </div>
      </div>
      <% }); %>
    </div>

    <script>
function detractPost(postId, user) {
  if (!user) {
    window.location.href = '/login'; // Redirect to the login page
    return; // Stop further execution
  }
  fetch(`/posts/${postId}/boost`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ user: user, action: "detract" })
  })
  .then(response => response.json())
  .then(data => {
    console.log(data); // Console log the JSON response
    if (data.message === "Detract successful") {
      // Increase the detract count in the view
      const detractCountElement = document.getElementById(`posts-score-${postId}`);
      detractCountElement.innerText = parseInt(detractCountElement.innerText) + 1;

      // Change color of trending down arrow
      const trendingDownElement = document.querySelector(`[onclick="detractPost('${postId}', '${user}')"]`);
      trendingDownElement.style.color = "red";

      // Check if the post was boosted by the user
      const boostCountElement = document.getElementById(`posts-score-${postId}`);
      if (boostCountElement.innerText > 0) {
        const trendingUpElement = document.querySelector(`[onclick="boostPost('${postId}', '${user}')"]`);
      trendingUpElement.style.color = "black";
              boostCountElement.innerText = parseInt(boostCountElement.innerText) - 1;
      }
    } else if (data.message === "Detract removed") {
      // Decrease the detract count in the view
      const detractCountElement = document.getElementById(`posts-score-${postId}`);
      detractCountElement.innerText = parseInt(detractCountElement.innerText) - 1;

      // Change color of trending down arrow back to black
      const trendingDownElement = document.querySelector(`[onclick="detractPost('${postId}', '${user}')"]`);
      trendingDownElement.style.color = "black";
    } else {
      // Handle error
    }
  })
  .catch((error) => {
    console.error('Error:', error);
  });
}

function boostPost(postId, user) {
  if (!user) {
    window.location.href = '/login'; // Redirect to the login page
    return; // Stop further execution
  }
  fetch(`/posts/${postId}/boost`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ user: user, action: "boost" })
  })
  .then(response => response.json())
  .then(data => {
    console.log(data); // Console log the JSON response
    if (data.message === "Boost successful") {
      // Increase the boost count in the view
      const boostCountElement = document.getElementById(`posts-score-${postId}`);
      boostCountElement.innerText = parseInt(boostCountElement.innerText) + 1;

      // Change color of trending up arrow
      const trendingUpElement = document.querySelector(`[onclick="boostPost('${postId}', '${user}')"]`);
      trendingUpElement.style.color = "green";

      // Check if the post was detracted by the user
      const detractCountElement = document.getElementById(`posts-score-${postId}`);
      if (detractCountElement.innerText > 0) {
        // Decrease the detract count in the view
        const trendingDownElement = document.querySelector(`[onclick="detractPost('${postId}', '${user}')"]`);
      trendingDownElement.style.color = "black";
        detractCountElement.innerText = parseInt(detractCountElement.innerText) - 1;
      }
    } else if (data.message === "Boost removed") {
      // Decrease the boost count in the view
      const boostCountElement = document.getElementById(`posts-score-${postId}`);
      boostCountElement.innerText = parseInt(boostCountElement.innerText) - 1;

      // Change color of trending up arrow back to black
      const trendingUpElement = document.querySelector(`[onclick="boostPost('${postId}', '${user}')"]`);
      trendingUpElement.style.color = "black";
    } else {
      // Handle error
    }
  })
  .catch((error) => {
    console.error('Error:', error);
  });
}

  const communities = [
        { name: "New", icon: "schedule" },
        { name: "Explore", icon: "public" },
        { name: "General", icon: "groups" },
        { name: "ML/AI", icon: "robot" },
        { name: "IT", icon: "developer_board" },
        { name: "Robotics", icon: "web" },
        { name: "Game-Dev", icon: "sports_esports" },
      ];

      function createButtons() {
        const container = document.getElementById("com-btn-container");

        communities.forEach((community) => {
          const button = document.createElement("button");
          button.className = "com-btn";
          button.setAttribute("data-community", community.name);

          button.appendChild(
            document.createTextNode(
              ` ${community.name.replace(/-/g, " ")}`
            )
          );

          container.appendChild(button);
        });
      }
      

      // Call the function to create buttons on page load
      createButtons();
    </script>
  </body>
</html>
