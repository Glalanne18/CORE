<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/community.css" />

  <link rel="stylesheet" href="/css/com-btn-container.css" />



  <link rel="shortcut icon" href="img/core.png" />
  <title><% community.name %></title>
</head>

<body>
  <%- include('partials/navbar', { pagePath: 'communities' }) %>

  <main>

    <div class="main-container">
      <%- include('partials/com-btn-container', { }) %>

      <div class="community-container">
        <div class="community-header">

          <div class="community-header-title">
            <h2><%= community.name %></h2>
            <button class="btn" id="communityActionBtn" data-action="join">Join</button>

          </div>
          <p><%= community.description ? community.description : 'No description for this community yet.'%></p>
          <p class="community-member-count"><%= community.MemberCount ? community.MemberCount : 0 %> members</p>
          <div class="community-actions">
          </div>

          <div class="sort-container">
            <label for="sort">Sort by:</label>
            <select name="sort" id="sort">
              <option value="newest">Newest</option>
              <option value="oldest">Oldest</option>
              <option value="most-liked">Most liked</option>
              <option value="most-commented">Most commented</option>
            </select>

          </div>
        </div>

        <div class="posts-container">
          test
        </div>

      </div>
  </main>

  <script>
    document.addEventListener("DOMContentLoaded", function() {
      const sortSelect = document.getElementById('sort');
      sortSelect.addEventListener('change', function() {
        fetchAndDisplayPostsForCommunity(this.value); // Pass the selected sort option to the function
      });

      function fetchAndDisplayPostsForCommunity(sortOption = 'newest') {
        fetch(`/api/communities/<%= community.id %>/posts?sort=${sortOption}`)
          .then((res) => res.json())
          .then((posts) => {
            const postsContainer = document.querySelector('.posts-container');
            postsContainer.innerHTML = '';
            posts.forEach(post => {
              // Main post div
              const postDiv = document.createElement('div');
              postDiv.className = 'post';
              postDiv.onclick = () => window.location.href = '/posts/' + post.id;

              // Post content div
              const postContentDiv = document.createElement('div');
              postContentDiv.className = 'post-content';

              // Post header div
              const postHeaderDiv = document.createElement('div');
              postHeaderDiv.className = 'post-header';

              // Avatar div
              const avatarDiv = document.createElement('div');
              avatarDiv.className = 'avatar';
              const avatarImg = document.createElement('img');
              avatarImg.src = post.avatar;
              avatarDiv.appendChild(avatarImg);
              postHeaderDiv.appendChild(avatarDiv);

              // Username and current job div
              const usernameDiv = document.createElement('div');
              usernameDiv.className = 'username';
              const usernameLink = document.createElement('a');
              usernameLink.href = '/profile/' + post.username;
              usernameLink.innerHTML = '<strong>' + post.username + '</strong>';
              usernameDiv.appendChild(usernameLink);

              const currentJobDiv = document.createElement('div');
              currentJobDiv.className = 'current-job';
              currentJobDiv.innerText = post.currentJob ? post.currentJob : 'No job info';
              usernameDiv.appendChild(currentJobDiv);
              postHeaderDiv.appendChild(usernameDiv);

              postContentDiv.appendChild(postHeaderDiv);

              // Title div
              const titleDiv = document.createElement('div');
              titleDiv.className = 'title';
              titleDiv.innerText = post.title;
              postContentDiv.appendChild(titleDiv);
              const linkPreviewDiv = document.createElement('div');

              if (post.link) {
                const linkPreviewDiv = document.createElement('div');
                linkPreviewDiv.className = 'link-preview';
                postContentDiv.appendChild(linkPreviewDiv);

                // Fetch and display link preview
                fetchLinkPreview(post.link, linkPreviewDiv).catch(error => console.error('Error fetching link preview:', error));
              }

              const contentDiv = document.createElement('div');
              contentDiv.className = 'content';
              contentDiv.innerText = post.content;
              postContentDiv.appendChild(contentDiv);


              // Votes div
              const votesDiv = document.createElement("div");
              votesDiv.className = "votes";

              // Reaction interactions div
              const reactionInteractionsDiv = document.createElement("div");
              reactionInteractionsDiv.className = "reaction-interactions";

              // boost button
              const boostButton = document.createElement("button");
              boostButton.className = "boost-button";
              boostButton.innerHTML = `<span class='material-symbols-outlined'>bolt</span> <span class='boost-count'>${post.boostCount}</span>`;

              boostButton.onclick = () => interactWithPost(post.id, "<%= user %>", "BOOST");

              reactionInteractionsDiv.appendChild(boostButton);


              const mainReactionButton = document.createElement("button");
              mainReactionButton.className = "main-reaction-button";
              mainReactionButton.innerText = "😀";
              reactionInteractionsDiv.appendChild(mainReactionButton);

              const reactionMenu = document.createElement("div");
              reactionMenu.className = "reaction-menu";

              document.body.appendChild(reactionMenu);

              mainReactionButton.onmouseover = function() {
                reactionMenu.style.display = "block";
              };



              // Reaction buttons
              const reactionTypes = [{
                  type: "LOVE",
                  icon: "❤️"
                },
                {
                  type: "LIKE",
                  icon: "👍"
                },
                {
                  type: "CURIOUS",
                  icon: "🤔"
                },
                {
                  type: "INTERESTING",
                  icon: "💡"
                },
                {
                  type: "CELEBRATE",
                  icon: "🎉"
                },
              ];

              reactionTypes.forEach(reaction => {
                if (post[reaction.type.toLowerCase() + 'Count'] > 0) {
                  const button = document.createElement("button");
                  button.className = `reaction-button ${reaction.type.toLowerCase()}-button`;
                  button.onclick = () => interactWithPost(post.id, "<%= user %>", reaction.type);

                  const icon = document.createElement("span");
                  icon.innerText = reaction.icon;

                  const countText = document.createElement("span");
                  countText.className = "reaction-count";
                  countText.innerText = ` ${post[reaction.type.toLowerCase() + 'Count']}`;

                  button.appendChild(icon);
                  button.appendChild(countText);
                  reactionInteractionsDiv.appendChild(button);
                }
              });

              reactionTypes.forEach(reaction => {
                const button = document.createElement("button");
                button.innerText = reaction.icon;
                button.onclick = () => interactWithPost(post.id, "<%= user %>", reaction.type);
                reactionMenu.appendChild(button);
              });

              let showMenuTimeout; // Variable to hold the timeout for showing the menu
              let hideMenuTimeout; // Variable to hold the timeout for hiding the menu

              mainReactionButton.addEventListener('mouseenter', (event) => {
                // Schedule to show the menu after a delay when hovering over the button
                showMenuTimeout = setTimeout(() => {
                  let rect = mainReactionButton.getBoundingClientRect();
                  reactionMenu.style.left = `${rect.left + window.scrollX}px`;
                  reactionMenu.style.top = `${rect.top + window.scrollY - reactionMenu.offsetHeight + 30}px`;
                  reactionMenu.style.display = 'flex';
                  reactionMenu.style.opacity = '1';
                  // Schedule to hide the menu if it's shown but the mouse hasn't moved towards it
                  hideMenuTimeout = setTimeout(() => {
                    reactionMenu.style.opacity = '0';
                    reactionMenu.style.display = 'none';
                  }, 2000); // Change this delay as needed
                }, 200); // Delay before menu is shown to check intention
              });

              mainReactionButton.addEventListener('mouseleave', () => {
                // Cancel showing the menu if mouse leaves the button before it's shown
                clearTimeout(showMenuTimeout);
                // Start hiding the menu immediately if it's already shown
                clearTimeout(hideMenuTimeout);
                hideMenuTimeout = setTimeout(() => {
                  reactionMenu.style.opacity = '0';
                  reactionMenu.style.display = 'none';
                }, 200); // Delay before hiding menu
              });

              reactionMenu.addEventListener('mouseenter', () => {
                // Cancel hiding the menu when mouse enters the menu area
                clearTimeout(hideMenuTimeout);
              });

              reactionMenu.addEventListener('mouseleave', () => {
                // Schedule to hide the menu after a delay when the mouse leaves the menu area
                hideMenuTimeout = setTimeout(() => {
                  reactionMenu.style.opacity = '0';
                  reactionMenu.style.display = 'none';
                }, 500); // Delay before hiding menu
              });

              votesDiv.appendChild(reactionInteractionsDiv);
              postContentDiv.appendChild(votesDiv);
              postContentDiv.appendChild(votesDiv);

              postDiv.appendChild(postContentDiv);
              document.querySelector('.posts-container').appendChild(postDiv);
            });

          });
      }

      function fetchLinkPreview(link, container) {
        return fetch(`/api/link-preview/${encodeURIComponent(encodeURIComponent(link))}`)
          .then(response => response.json())
          .then(linkPreview => {
            if (linkPreview) {
              let imageUrl = linkPreview.image || linkPreview.favicon;
              let htmlContent = `
          <div class="mini-link">
              <div class="mini-link-image">
                  ${imageUrl ? `<img src="${imageUrl}" alt="thumbnail" class="thumbnail-image" />` : ''}
              </div>
              <div class="mini-link-body">
                  <div class="mini-link-title">${linkPreview.title || ''}</div>
                  <div class="mini-link-desc">${linkPreview.description || ''}</div>
              </div>
          </div>`;
              container.innerHTML = htmlContent;
            }
          });
      }


      fetchAndDisplayPostsForCommunity(<%= community.id%>);
    });

    document.addEventListener("DOMContentLoaded", function() {
      const communityActionBtn = document.getElementById("communityActionBtn");
      const memberCountElement = document.querySelector('.community-member-count');

      function updateMemberCount(isJoining) {
        let memberCount = parseInt(memberCountElement.textContent.split(' ')[0]);
        if (isJoining) {
          memberCountElement.textContent = `${memberCount + 1} members`; // Increment on join
        } else {
          memberCountElement.textContent = `${Math.max(0, memberCount - 1)} members`; // Decrement on leave, prevent negative numbers
        }
      }

      // Function to toggle community membership
      function toggleCommunityMembership() {
        const action = communityActionBtn.dataset.action; // "join" or "leave"
        const url = `/communities/<%= community.id %>/${action}`;

        fetch(url, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              // Authorization header if needed
            },
          })
          .then(response => {
            if (response.ok) {
              return response.json(); // Adjust based on actual response
            }
            throw new Error('Failed to perform action');
          })
          .then(data => {
            // Toggle button state
            if (action === "join") {
              communityActionBtn.textContent = "Leave";
              communityActionBtn.dataset.action = "leave";
              updateMemberCount(true); // Optimistically increment member count

            } else {
              communityActionBtn.textContent = "Join";
              communityActionBtn.dataset.action = "join";
              updateMemberCount(false); // Optimistically decrement member count

            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert("Error performing action.");
          });
      }

      // Function to check membership and update button
      function checkMembershipAndUpdateButton() {
        fetch(`/communities/<%= community.id %>/isMember`)
          .then(response => response.json())
          .then(data => {
            if (data.isMember) {
              communityActionBtn.textContent = "Leave";
              communityActionBtn.dataset.action = "leave";
            } else {
              communityActionBtn.textContent = "Join";
              communityActionBtn.dataset.action = "join";
            }
            communityActionBtn.addEventListener("click", toggleCommunityMembership);
          })
          .catch(error => console.error('Error checking membership:', error));

        fetch(`/api/communities/${communityId}`)
          .then(response => response.json())
          .then(community => {
            document.querySelector('.community-member-count').textContent = `${community.MemberCount} members`;
          })
          .catch(error => console.error('Error fetching updated community details:', error));
      }

      // Initially check membership and set button state
      checkMembershipAndUpdateButton();
    });
  </script>

</body>

</html>