<!DOCTYPE html>
<html>

<head>
  <title>CORE: <%= post.title %></title>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta name="description" content="<%= post.content.substring(0, 160) %>" />
  <meta name="keywords" content="Your, Keywords, Here" />

  <!-- Open Graph / Facebook -->
  <meta property="og:type" content="article" />
  <meta property="og:title" content="<%= post.title %>" />
  <meta property="og:description" content="<%= post.content.substring(0, 160) %>" />
  <meta property="og:image" content="<%= post.user.avatar || '/img/default-avatar.png' %>" />
  <meta property="og:url" content="c-ore.dev/post/<%= post.id %>" />

  <!-- Twitter -->
  <meta property="twitter:card" content="summary_large_image" />
  <meta property="twitter:title" content="<%= post.title %>" />
  <meta property="twitter:description" content="<%= post.content.substring(0, 160) %>" />
  <meta property="twitter:image" content="<%= post.user.avatar || '/img/default-avatar.png' %>" />

  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/post.css" />
  <link rel="shortcut icon" href="img/core.png" />
  <link rel="stylesheet" href="https://unpkg.com/easymde/dist/easymde.min.css">
  <script src="https://unpkg.com/easymde/dist/easymde.min.js"></script>

</head>

<body>
  <%- include('partials/navbar', { pagePath: 'home' }) %>

  <main>
    <div class="main-container">
      <div class="post">
        <div class="header">
          <div class="title">
            <h2 class="post-title"><%= post.title %></h2>
            <p class="post-subtitle">
              in <%= post.community.name %>

              <%
              let postDate = new Date(post.created_at);
              let today = new Date();
              let formattedDate;
            
              // Calculate time difference in milliseconds
              let diff = today - postDate;
            
              // Convert time difference to different units
              let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
              let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
              let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day
              let years = Math.floor(diff / 31536000000); // 31,536,000,000 milliseconds in a year
            
              // Decide the format based on the time difference
              if (minutes < 60) {
                formattedDate = minutes + 'm ago';
              } else if (hours < 24) {
                formattedDate = hours + 'h ago';
              } else if (days < 365) {
                formattedDate = days + 'd ago';
              } else {
                formattedDate = years + 'y ago';
              }
            %>
              <%= formattedDate %>
              </h4>
          </div>
        </div>

        <div class="post-container">
          <div class="post-content">
            <div class="post-interactions-header">

              <div class="dropdown">
                <button class="dropbtn">
                  <span class="material-symbols-outlined">more_horiz</span>
                </button>
                <div class="dropdown-content" style="display: none;">
                  <% if (user && user.username === post.user.username) { %>
                  <a href="/posts/<%= post.id %>/edit">Edit</a>
                  <form action="/posts/<%= post.id %>?_method=DELETE" method="POST" onsubmit="return confirm('Are you sure you want to delete this post?');">
                    <input type="hidden" name="_method" value="DELETE" />
                    <button type="submit">Delete</button>
                  </form>
                  <% } %>
                </div>
              </div>
            </div>
            <div class="post-body">
              <%- post.content %>
              <div class="user-interactions">
                <% const reactionTypes = [
        {
            type: "boost",
            icon: "⚡️",
            count: post.boostCount
        },
        {
            type: "LOVE",
            icon: "❤️",
            count: post.loveCount
        },
        {
            type: "LIKE",
            icon: "👍",
            count: post.likeCount
        },
        {
            type: "CURIOUS",
            icon: "🤔",
            count: post.curiousCount
        },
        {
            type: "INTERESTING",
            icon: "💡",
            count: post.interestingCount
        },
        {
            type: "CELEBRATE",
            icon: "🎉",
            count: post.celebrateCount
        }
    ]; %>
                <% reactionTypes.forEach(reaction => { %>
                <button class="reaction-button" onclick='
              <% if (user) { %>
              interactWithPost(<%= post.id %>, <%= user %>, <%= reaction.type %>)
              <% } else { %>
              window.location.href = "/login";
              <% } %>
              '> <%= reaction.icon %> <%= reaction.count %></button>
                <% }); %>
                <% if (user && user.username === post.user.username) { %>

                <% } %>
              </div>
            </div>
          </div>

          <% if (user) { %>
          <form id="comment-form" action="/posts/<%= post.id %>/comments" method="POST">
            <div class="input-container">
              <textarea id="comment" name="comment" required maxlength="500" placeholder="Add a comment..." oninput="autoResizeTextarea(this)"></textarea>
              <button type="submit" class="fab">
                Submit
              </button>
            </div>
          </form>
          <% } %>
        </div>
      </div>

      <div class="comments-section">
        <% function renderComments(comments, level = 0) { %>
        <% comments.forEach(comment =>
        { %>
        <% if (level == 0) { %>
        <div class="comment-with-replies">
          <% } %>
          <div class="comment">

            <div class="comment-main">

              <div class="comment-content">

                <div class="repliers-avatar">
                  <% if (level == 0) { %>
                  <img src="<%= comment.user.avatar || '/img/default-avatar.png' %>" alt="Avatar" class="avatar" onerror="standby()" />
                  <% } else { %>
                  <img src="<%= comment.user.avatar || '/img/default-avatar.png' %>" alt="Avatar" class="avatar-nested" onerror="standby()" />
                  <% } %>
                </div>
                <a class="comment-user-info" href="/profile/<%= comment.user.username %>">
                  <div class="repliers-info">
                    <%= comment.user.username%>
                </a>
              </div>
              <p>to</p>
              <div class="repliees-info">
                <a class="comment-user-info" href="/profile/<%= comment.parent_author.username %>">
              </div>

              <%= comment.parent_author.username %></a>
              <span>&#183;</span>

              <% let commentDate = new Date(comment.created_at);
            let currentDate = new Date();
            let timeDifference = currentDate - commentDate;
            let minutes = Math.floor(timeDifference / 60000);
            let hours = Math.floor(minutes / 60);
            let days = Math.floor(hours / 24);
            let timeSinceComment = '';

            if (days > 0) {
              timeSinceComment = days + 'd ago';
            } else if (hours > 0) {
              timeSinceComment = hours +  'h ago';
            } else if (minutes > 0) {
              timeSinceComment = minutes + 'm ago';
            } else {
              timeSinceComment = 'Just now';
            }
            %>
              <span class="comment-timestamp"><%= timeSinceComment %></p>
            </div>
            <div class="comment-body">
              <%- linkify(comment.comment) %>
            </div>


            <% if (user) { %>
            <form action="/comments/<%= comment.id %>/replies" method="POST" class="reply-form" style="display: none">
              <textarea name="comment" required></textarea>
              <button type="submit">Submit Reply</button>
            </form>
            <% } %>


            <div class="user-actions">
              <div class="comment-chevron" onclick="toggleNestedComments(' <%= comment.id %>', <%= nestedLevel %>)">
                <% 
function countAllReplies(replies) {
    if (!replies || replies.length === 0) return 0;
    let total = 0;
    for (const reply of replies) {
        total += 1 + countAllReplies(reply.replies);
    }
    return total;
}
const totalReplies = countAllReplies(comment.replies);
%>

                <% if (totalReplies > 0) { %>
                <span class="material-symbols-outlined chevron">chevron_right</span>
                <% if (level >= 3) { %>
                <span class="replies-count" onclick="toggleNestedComments('<%= comment.id %>', <%= nestedLevel %>)">
                  <%= totalReplies %> <% if (totalReplies === 1) { %> reply <% } else { %> replies <% } %>
                </span>
                <% } %> <% } %>
              </div>
              <% if (user) { %>
              <div class="replies">
                <a href="#" id="reply-button" onclick="showReplyForm('<%= comment.id %>', event)">
                  <span class="material-symbols-outlined">reply</span> Reply
                </a>
              </div>
              <div clas="delete">
                <% if (user.username === comment.user.username) { %>
                <form id="delete-comment-form-<%= comment.id %>" action="/comment/<%= comment.id %>?_method=DELETE" method="POST" onsubmit="return confirm('Are you sure you want to delete this comment?');">
                  <input type="hidden" name="_method" value="DELETE" />
                  <a href="#" class="delete-comment-button-<%= comment.id %>" onclick="document.getElementById('delete-comment-form-<%= comment.id %>').submit();">
                    <span class="material-symbols-outlined"> delete </span> Delete
                  </a>
                </form>
                <% } %>

              </div>

              <% } %>
            </div>
          </div>


          <% if (comment.replies && comment.replies.length > 0) { %>
          <% var nestedLevel = level + 1; %>
          <% var divClass = 'nested-comment level-' + Math.min(nestedLevel, 6); %>
          <div class="<%= divClass %>" id="nested-comments-<%= comment.id %>" style="
      <% if (nestedLevel < 4) { %>
      display: block;
      <% } else { %>
      display: none;
      <% } %>
      ">

            <% renderComments(comment.replies, nestedLevel); %>
          </div>
          <% } %>
        </div>


        <% if (level == 0) { %>

        <div class="reply-form">
          <form id="reply-form-<%= comment.id %>" action="/comments/<%= comment.id %>/replies" method="POST" style="display: block">
            <div class="input-container">
              <form onsubmit="submitForm('comment-form', event);">
                <textarea id="comment" name="comment" rows="4" required oninput="autoExpandTextarea(event)" maxlength="500"></textarea>
                <button type="submit" class="fab">
                  Submit
                </button>
              </form>
            </div>
          </form>
        </div>

      </div>
      <% } %>

      <% }) %>
      <% } %>
      <% renderComments(post.comments); %>

    </div>
    </div>
    <div class="sidebar-container">

      <div class="sidebar" style=" <% if (post.linkPreview) { %> max-width: 45%; <% } else { %> width: 100%; <% } %> ">
        <div class=" sidebar-content">
          <div class="sidebar-body">
            <div class="sidebar-poster-avatar">
              <img src="<%= post.user.avatar || '/img/default-avatar.png' %>" alt="Avatar" class="sidebar-avatar" onerror="standby()" />
            </div>
            <div class="sidebar-poster">
              <div class="sidebar-poster-info">
                <div class="sidebar-poster-name">
                  <a href="/profile/<%= post.user.username %>" style="text-decoration: none;">
                    <%= post.user.username %>
                  </a>
                </div>
                <div class="sidebar-poster-job">
                  <% if (post.user.currentJob && post.user.currentCompany) { %>
                  <%= post.user.currentJob %> @ <strong><%= post.user.currentCompany %></strong>
                  <% } else { %>
                  No job information
                  <% } %>

                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <% if (post.linkPreview) { %>
      <div class="sidebar">
        <div class="sidebar-content">

          <div class="sidebar-body">
            <div class="sidebar-link-image">


              <a href="<%= post.linkPreview.url %>">
                <% let imageUrl = post.linkPreview.image || post.linkPreview.favicon; %>
                <% if (imageUrl) { %>
                <img src="<%= imageUrl %>" alt="Preview" class="preview-image" />
                <% } %>
            </div>
            <div class="sidebar-link-info-title">
              <%= post.linkPreview.title %>
            </div>
            <div class="sidebar-link-info">
              <div class="sidebar-link-info-url">
                <%= post.linkPreview.url %>
              </div>
            </div>
          </div>
        </div>
        <% } %>

  </main>


  <script>
    // JavaScript function to toggle nested comments
    function toggleNestedComments(commentId, level) {
      var nestedComments = document.getElementById('nested-comments-' + commentId);
      if (nestedComments) {
        var isDisplayed = nestedComments.style.display === 'block';
        nestedComments.style.display = isDisplayed ? 'none' : 'block'; // Toggle display

        // Change chevron direction based on visibility
        var chevron = nestedComments.previousElementSibling.querySelector('.chevron');
        if (chevron) {
          chevron.textContent = isDisplayed ? 'chevron_right' : 'expand_more';
        }

        // Optionally, if you want to hide all deeper nested comments when collapsing one,
        // you can add the following lines:
        if (isDisplayed) {
          var allNested = nestedComments.querySelectorAll('.nested-comment');
          allNested.forEach(function(nested) {
            nested.style.display = 'none'; // Hide all deeper nested comments
            // Reset all chevrons in deeper nested comments
            var innerChevrons = nested.previousElementSibling.querySelectorAll('.chevron');
            innerChevrons.forEach(function(chevron) {
              chevron.textContent = 'chevron_right';
            });
          });
        }
      }
    }



    function submitForm(formId, event) {
      event.preventDefault();
      var form = document.getElementById(formId);

      if (!form) {
        console.error("Form not found: " + formId);
        return false;
      }

      var isReplyForm = formId.startsWith("reply-form");

      var inputField;
      if (isReplyForm) {
        inputField = form.querySelector("textarea");
      } else {
        inputField = form.querySelector('input[name="comment"]');
      }

      // Check if the input field or textarea exists
      if (!inputField) {
        console.error("Input field not found in form: " + formId);
        return false;
      }

      // Validate input value
      if (inputField.value.trim() === "") {
        alert("Your message cannot be empty.");
        return false;
      } else {
        // Submit the form
        form.submit();
      }
    }

    function interactWithPost(postId, user, action) {
      if (!user) {
        window.location.href = '/login';
        return;
      }

      fetch(`/posts/${postId}/react`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            user: user,
            action: action
          }) // Ensure action is in lowercase
        })
        .then(response => response.json())
        .then(data => {
          console.log('Success:', data);

          // Update or create reaction buttons
          reactionTypes.forEach(reaction => {
            const reactionCount = data.reactions[reaction.type] || 0;
            let reactionButton = document.querySelector(`.reaction-button.${reaction.type.toLowerCase()}-button`);

            if (!reactionButton && reactionCount > 0) {
              // Create a new reaction button if it doesn't exist and the count is positive
              reactionButton = document.createElement("button");
              reactionButton.className = `reaction-button ${reaction.type.toLowerCase()}-button`;
              reactionButton.onclick = () => interactWithPost(postId, user, reaction.type);

              const icon = document.createElement("span");
              icon.innerText = reaction.icon;

              const countText = document.createElement("span");
              countText.className = "reaction-count";
              countText.innerText = ` ${reactionCount}`;

              reactionButton.appendChild(icon);
              reactionButton.appendChild(countText);
              reactionInteractionsDiv.appendChild(reactionButton);
            } else if (reactionButton) {
              // Update count of existing button
              const countSpan = reactionButton.getElementsByClassName('reaction-count')[0];
              countSpan.innerText = ` ${reactionCount}`;

              // Update button color if needed
              if (reaction.type.toLowerCase() === action.toLowerCase()) {
                reactionButton.style.color = "blue"; // Change color to indicate selected action
              } else {
                reactionButton.style.color = "black"; // Reset color for other buttons
              }
            }
          });
        })
        .catch((error) => {
          console.error('Error:', error);
        });
    }

    function showReplyForm(commentId, event) {
      event.preventDefault();
      var form = document.getElementById("reply-form-" + commentId);
      form.style.display = form.style.display === "none" ? "block" : "none";
    }

    function confirmDeletion(element) {
      if (confirm('Are you sure you want to delete this post?')) {
        element.closest('form').submit();
      }
      return false;
    }

    function standby() {
      document.getElementById('avatar').src = "/img/default-avatar.png"
    }

    function autoExpandTextarea(event) {
      event.target.style.height = 'inherit';
      event.target.style.height = `${event.target.scrollHeight}px`;
    }
    document.addEventListener("DOMContentLoaded", function() {
      const posts = document.querySelectorAll('.post-container');

      posts.forEach(post => {
        const content = post.querySelector('.post-content');
        const viewMore = post.querySelector('.view-more');

        if (content.scrollHeight > content.clientHeight) {
          // Content is longer than the max height
          viewMore.style.display = 'block';

          viewMore.addEventListener('click', function() {
            if (content.style.maxHeight) {
              // If max-height is set, remove it
              content.style.maxHeight = null;
              viewMore.textContent = 'View More';
            } else {
              // Set max-height to scrollHeight to expand
              content.style.maxHeight = content.scrollHeight + 'px';
              viewMore.textContent = 'View Less';
            }
          });
        }
      });
    });

    document.addEventListener("DOMContentLoaded", function() {
      var postContents = document.querySelectorAll('.post-content');

      postContents.forEach(function(postContent) {
        if (postContent.scrollHeight > postContent.clientHeight) {
          postContent.classList.add('overflow');
        }
      });
    });


    document.getElementById('comment').addEventListener('input', autoExpandTextarea);
  </script>
</body>

</html>