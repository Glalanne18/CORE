<!DOCTYPE html>
<html>
  <head>
    <title>CORE</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/css/navbar.css" />
    <link rel="stylesheet" href="/css/post.css" />
  </head>
  <body>
    <%- include('partials/navbar', { pagePath: 'home' }) %>

    <div class="main-container">
      <div class="post">
        <h2 class="post-title"><%= post.title %></h2>

        <div class="post-content">
          <%= post.content %> <% if (post.linkPreview) { %>

          <div class="link-preview">
            <img
              src="<%= post.linkPreview.favicon %>"
              alt="Preview"
              class="preview-image"
            />
            <div class="preview-text">
              <h4 class="preview-title">
                <a href="<%= post.linkPreview.url %>"
                  ><%= post.linkPreview.title %></a
                >
              </h4>
              <p class="preview-description">
                <%=post.linkPreview.description %> <%= post.linkPreview.icon
                %><%= post.linkPreview.icon %><%= post.linkPreview.favicon %>
              </p>
            </div>
          </div>

          <% } %> <%= post.community_id %>
        </div>
        <a class="user-info" href="/profile/<%= post.user.username %>"
          ><%= post.user.username %></a
        >
        <% if (post.user.verified === true) { %>
        <span class="material-symbols-outlined">verified</span>
        <% } %> <span>&#183;</span>
        <% let postDate = new Date(post.created_at); let today = new Date(); let
        formattedDate; let timeOptions = { hour: '2-digit', minute: '2-digit' };
        if(postDate.toDateString() === today.toDateString()) { formattedDate =
        `Today, ${postDate.toLocaleTimeString(undefined, timeOptions)}`; } else
        { formattedDate = `${postDate.toLocaleDateString().slice(0,
        5)}/${postDate.getFullYear().toString().slice(-2)}`; } %> <%=
        formattedDate %>
        <div class="user-interactions">
          <div class="boosts">
            <div id="post-boosts-<%= post.id %>"><%= post.boosts %></div>
            <span
              class="material-symbols-outlined"
              onclick="boostPost('<%= post.id %>', '<%= user %>')"
            >
              thumb_up
            </span>
          </div>
          <div class="detracts">
            <div id="post-detracts-<%= post.id %>"><%= post.detracts %></div>
            <span
              class="material-symbols-outlined"
              onclick="detractPost('<%= post.id %>', '<%= user %>')"
            >
              thumb_down
            </span>
          </div>
          <div class="replies">
            <div id="post-detracts-<%= post.id %>">
              <%= post.comments.length %>
            </div>
            <span
              class="material-symbols-outlined"
              onclick="detractPost('<%= post.id %>', '<%= user %>')"
            >
              comment
            </span>
          </div>
        </div>
        <div class="post-user-actions">
          <% if (user && user.username === post.user.username) { %>
          <div class="delete">
            <form
              action="/post/<%= post.id %>?_method=DELETE"
              method="POST"
              onsubmit="return confirm('Are you sure you want to delete this post?');"
            >
              <input type="hidden" name="_method" value="DELETE" />
              <a
                href="#"
                id="delete-post-button"
                onclick="this.closest('form').submit(); return false;"
              >
                <span class="material-symbols-outlined"> delete </span>
              </a>
            </form>
          </div>
          <% } %>
        </div>
        <% if (user) { %>
        <form
          id="comment-form"
          action="/posts/<%= post.id %>/comments"
          method="POST"
        >
          <div class="input-container">
            <input type="text" id="comment" name="comment" required />
            <a href="#" class="fab" onclick="submitForm('comment-form');">
              <span class="material-symbols-outlined">send</span>
            </a>
          </div>
        </form>
        <% } %>
      </div>

      <div class="comments-section">
        <% function renderComments(comments) { %> <% comments.forEach(comment =>
        { %>
        <div class="comment">
          <div class="comment-content">
            <a class="user-info" href="/profile/<%= post.user.username %>"
              ><%= comment.user.username%></a
            ><% if (comment.user.verified === true) { %>
            <span class="material-symbols-outlined" id="verified"
              >verified</span
            >
            <% } %> <span>&#183;</span>
            <% let commentDate = new Date(comment.created_at); let today = new
            Date(); let formattedDate; let timeOptions = { hour: '2-digit',
            minute: '2-digit' }; if(commentDate.toDateString() ===
            today.toDateString()) { formattedDate = `Today,
            ${commentDate.toLocaleTimeString(undefined, timeOptions)}`; } else {
            formattedDate = `${commentDate.toLocaleDateString().slice(0,
            5)}/${commentDate.getFullYear().toString().slice(-2)}`; } %> <%=
            formattedDate %>
          </div>
          <%= comment.comment %> <% if (user) { %>
          <form
            action="/comments/<%= comment.id %>/replies"
            method="POST"
            class="reply-form"
            style="display: none"
          >
            <textarea name="comment" required></textarea>
            <button type="submit">Submit Reply</button>
          </form>
          <div class="user-actions">
            <div class="boosts">
              <div id="comment-boosts-<%= comment.id %>">
                <%= comment.boosts %>
              </div>
              <span
                class="material-symbols-outlined"
                onclick="boostComment('<%= post.id %>', '<%= user %>')"
              >
                thumb_up
              </span>
            </div>
            <div class="detracts">
              <div id="comment-detracts-<%= comment.id %>">
                <%= comment.detracts %>
              </div>
              <span
                class="material-symbols-outlined"
                onclick="detractComment('<%= post.id %>', '<%= user %>')"
              >
                thumb_down
              </span>
            </div>
            <% if (user) { %>
            <a
              href="#"
              id="reply-button"
              onclick="showReplyForm('<%= comment.id %>')"
            >
              <span class="material-symbols-outlined">reply</span> Reply
            </a>
            <% } %> <% if (user && user.username === comment.user.username) { %>
            <form
              id="delete-comment-form-<%= comment.id %>"
              action="/comment/<%= comment.id %>?_method=DELETE"
              method="POST"
              onsubmit="return confirm('Are you sure you want to delete this comment?');"
            >
              <input type="hidden" name="_method" value="DELETE" />
              <a
                href="#"
                class="delete-comment-button-<%= comment.id %>"
                onclick="document.getElementById('delete-comment-form-<%= comment.id %>').submit();"
              >
                <span class="material-symbols-outlined"> delete </span> Delete
              </a>
            </form>
            <% } %> <% } %>
          </div>
          <form
            id="reply-form-<%= comment.id %>"
            action="/comments/<%= comment.id %>/replies"
            method="POST"
            style="display: none"
          >
            <div class="input-container">
              <textarea
                id="reply-<%= comment.id %>"
                name="comment"
                required
              ></textarea>
              <a
                href="#"
                class="fab"
                onclick="submitForm('reply-form-<%= comment.id %>');"
              >
                <span class="material-symbols-outlined">send</span>
              </a>
            </div>
          </form>

          <!-- Render nested comments -->
          <% if (comment.replies && comment.replies.length > 0) { %>
          <div class="nested-comment">
            <% renderComments(comment.replies); %>
          </div>
          <% } %>
        </div>
        <% }) %> <% } %> <% renderComments(post.comments); %>
      </div>
    </div>

    <script>
      function detractPost(postId, user) {
        if (!user) {
          window.location.href = "/login"; // Redirect to the login page
          return; // Stop further execution
        }
        fetch(`/posts/${postId}/boost`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ user: user, action: "detract" }),
        })
          .then((response) => response.json())
          .then((data) => {
            console.log(data); // Console log the JSON response
            if (data.message === "Detract successful") {
              // Increase the detract count in the view
              const detractCountElement = document.getElementById(
                `post-detracts-${postId}`
              );
              detractCountElement.innerText =
                parseInt(detractCountElement.innerText) + 1;

              // Change color of trending down arrow
              const trendingDownElement = document.querySelector(
                `[onclick="detractPost('${postId}', '${user}')"]`
              );
              trendingDownElement.style.color = "red";

              // Check if the post was boosted by the user
              const boostCountElement = document.getElementById(
                `post-boosts-${postId}`
              );
              if (boostCountElement.innerText > 0) {
                const trendingUpElement = document.querySelector(
                  `[onclick="boostPost('${postId}', '${user}')"]`
                );
                trendingUpElement.style.color = "black";
                boostCountElement.innerText =
                  parseInt(boostCountElement.innerText) - 1;
              }
            } else if (data.message === "Detract removed") {
              // Decrease the detract count in the view
              const detractCountElement = document.getElementById(
                `post-detracts-${postId}`
              );
              detractCountElement.innerText =
                parseInt(detractCountElement.innerText) - 1;

              // Change color of trending down arrow back to black
              const trendingDownElement = document.querySelector(
                `[onclick="detractPost('${postId}', '${user}')"]`
              );
              trendingDownElement.style.color = "black";
            } else {
              // Handle error
            }
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      }

      function boostComment(commentId, user) {
        if (!user) {
          window.location.href = "/login"; // Redirect to the login page
          return; // Stop further execution
        }
        fetch(`/comments/${commentId}/boost`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ user: user, action: "boost" }),
        })
          .then((response) => response.json())
          .then((data) => {
            console.log(data); // Console log the JSON response
            if (data.message === "Boost successful") {
              // Increase the boost count in the view
              const boostCountElement = document.getElementById(
                `comment-boosts-${commentId}`
              );
              boostCountElement.innerText =
                parseInt(boostCountElement.innerText) + 1;

              // Change color of trending up arrow
              const trendingUpElement = document.querySelector(
                `[onclick="boostComment('${commentId}', '${user}')"]`
              );
              trendingUpElement.style.color = "green";

              // Check if the comment was detracted by the user
              const detractCountElement = document.getElementById(
                `comment-detracts-${commentId}`
              );
              if (detractCountElement.innerText > 0) {
                // Decrease the detract count in the view
                const trendingDownElement = document.querySelector(
                  `[onclick="detractComment('${commentId}', '${user}')"]`
                );
                trendingDownElement.style.color = "black";
                detractCountElement.innerText =
                  parseInt(detractCountElement.innerText) - 1;
              }
            } else if (data.message === "Boost removed") {
              // Decrease the boost count in the view
              const boostCountElement = document.getElementById(
                `comment-boosts-${commentId}`
              );
              boostCountElement.innerText =
                parseInt(boostCountElement.innerText) - 1;

              // Change color of trending up arrow back to black
              const trendingUpElement = document.querySelector(
                `[onclick="boostComment('${commentId}', '${user}')"]`
              );
              trendingUpElement.style.color = "black";
            } else {
              // Handle error
            }
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      }

      function detractComment(commentId, user) {
        if (!user) {
          window.location.href = "/login"; // Redirect to the login page
          return; // Stop further execution
        }
        fetch(`/comments/${commentId}/boost`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ user: user, action: "detract" }),
        })
          .then((response) => response.json())
          .then((data) => {
            console.log(data); // Console log the JSON response
            if (data.message === "Detract successful") {
              // Increase the detract count in the view
              const detractCountElement = document.getElementById(
                `comment-detracts-${commentId}`
              );
              detractCountElement.innerText =
                parseInt(detractCountElement.innerText) + 1;

              // Change color of trending down arrow
              const trendingDownElement = document.querySelector(
                `[onclick="detractComment('${commentId}', '${user}')"]`
              );
              trendingDownElement.style.color = "red";

              // Check if the comment was boosted by the user
              const boostCountElement = document.getElementById(
                `comment-boosts-${commentId}`
              );
              if (boostCountElement.innerText > 0) {
                const trendingUpElement = document.querySelector(
                  `[onclick="boostComment('${commentId}', '${user}')"]`
                );
                trendingUpElement.style.color = "black";
                boostCountElement.innerText =
                  parseInt(boostCountElement.innerText) - 1;
              }
            } else if (data.message === "Detract removed") {
              // Decrease the detract count in the view
              const detractCountElement = document.getElementById(
                `comment-detracts-${commentId}`
              );
              detractCountElement.innerText =
                parseInt(detractCountElement.innerText) - 1;

              // Change color of trending down arrow back to black
              const trendingDownElement = document.querySelector(
                `[onclick="detractComment('${commentId}', '${user}')"]`
              );
              trendingDownElement.style.color = "black";
            } else {
              // Handle error
            }
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      }

      function boostPost(postId, user) {
        if (!user) {
          window.location.href = "/login"; // Redirect to the login page
          return; // Stop further execution
        }
        fetch(`/posts/${postId}/boost`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ user: user, action: "boost" }),
        })
          .then((response) => response.json())
          .then((data) => {
            console.log(data); // Console log the JSON response
            if (data.message === "Boost successful") {
              // Increase the boost count in the view
              const boostCountElement = document.getElementById(
                `post-boosts-${postId}`
              );
              boostCountElement.innerText =
                parseInt(boostCountElement.innerText) + 1;

              // Change color of trending up arrow
              const trendingUpElement = document.querySelector(
                `[onclick="boostPost('${postId}', '${user}')"]`
              );
              trendingUpElement.style.color = "green";

              // Check if the post was detracted by the user
              const detractCountElement = document.getElementById(
                `post-detracts-${postId}`
              );
              if (detractCountElement.innerText > 0) {
                // Decrease the detract count in the view
                const trendingDownElement = document.querySelector(
                  `[onclick="detractPost('${postId}', '${user}')"]`
                );
                trendingDownElement.style.color = "black";
                detractCountElement.innerText =
                  parseInt(detractCountElement.innerText) - 1;
              }
            } else if (data.message === "Boost removed") {
              // Decrease the boost count in the view
              const boostCountElement = document.getElementById(
                `post-boosts-${postId}`
              );
              boostCountElement.innerText =
                parseInt(boostCountElement.innerText) - 1;

              // Change color of trending up arrow back to black
              const trendingUpElement = document.querySelector(
                `[onclick="boostPost('${postId}', '${user}')"]`
              );
              trendingUpElement.style.color = "black";
            } else {
              // Handle error
            }
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      }

      function submitForm(formId) {
        var form = document.getElementById(formId);

        if (!form) {
          console.error("Form not found: " + formId);
          return false;
        }

        var isReplyForm = formId.startsWith("reply-form");

        var inputField;
        if (isReplyForm) {
          inputField = form.querySelector("textarea");
        } else {
          inputField = form.querySelector('input[name="comment"]');
        }

        // Check if the input field or textarea exists
        if (!inputField) {
          console.error("Input field not found in form: " + formId);
          return false;
        }

        // Validate input value
        if (inputField.value.trim() === "") {
          alert("Your message cannot be empty.");
          return false;
        } else {
          // Submit the form
          form.submit();
        }
      }

      function showReplyForm(commentId) {
        var form = document.getElementById("reply-form-" + commentId);
        form.style.display = form.style.display === "none" ? "block" : "none";
      }
    </script>
  </body>
</html>
