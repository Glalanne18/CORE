<!DOCTYPE html>
<html>
  <head>
    <title>CORE: <%= post.title %></title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="<%= post.content.substring(0, 160) %>" />
    <meta name="keywords" content="Your, Keywords, Here" />
  
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="article" />
    <meta property="og:title" content="<%= post.title %>" />
    <meta property="og:description" content="<%= post.content.substring(0, 160) %>" />
    <meta property="og:image" content="<%= post.user.avatar || '/img/default-avatar.png' %>" />
    <meta property="og:url" content="c-ore.dev/post/<%= post.id %>" />
  
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:title" content="<%= post.title %>" />
    <meta property="twitter:description" content="<%= post.content.substring(0, 160) %>" />
    <meta property="twitter:image" content="<%= post.user.avatar || '/img/default-avatar.png' %>" />
  
    <link rel="stylesheet" href="/css/navbar.css" />
    <link rel="stylesheet" href="/css/post.css" />
    <link rel="shortcut icon" href="img/core.png" />

  </head>
  <body>
    <%- include('partials/navbar', { pagePath: 'home' }) %>

    <div class="main-container">
      <div class="post">
        <div class="header">
          <a class="community" href="/"><%= post.community.name %></a>/
          <img src="<%= post.user.avatar || '/img/default-avatar.png' %>" alt="Avatar" class="avatar" onerror="standby()" />

          <a class="user-info" href="/profile/<%= post.user.username %>"
          >
          <div class="header-text">
          <%= post.user.username %></a
        > 
        </div>
        <div class="timestamp">
          <%
        let postDate = new Date(post.created_at);
        let today = new Date();
        let formattedDate;
      
        // Calculate time difference in milliseconds
        let diff = today - postDate;
      
        // Convert time difference to different units
        let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
        let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
        let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day
        let years = Math.floor(diff / 31536000000); // 31,536,000,000 milliseconds in a year
      
        // Decide the format based on the time difference
        if (minutes < 60) {
          formattedDate = minutes + 'm ago';
        } else if (hours < 24) {
          formattedDate = hours + 'h ago';
        } else if (days < 365) {
          formattedDate = days + 'd ago';
        } else {
          formattedDate = years + 'y ago';
        }
      %>
      <%= formattedDate %>
        </div>
      </div>
        
        <div class="title">
          <h2 class="post-title"><%= post.title %></h2>
        </div>
      <div class="post-content">

          <% if (post.linkPreview) { %>
          <a href="<%= post.linkPreview.url %>">
          <% let imageUrl = post.linkPreview.image || post.linkPreview.favicon; %> 
          <% if (imageUrl) { %>
          <div class="link-preview">
            <img src="<%= imageUrl %>" alt="Preview" class="preview-image" />
            <% } %>
            <div class="preview-text">
              <h4 class="preview-title">
                  <%= post.linkPreview.title %>
              </h4>
              <p class="preview-link">
                <%= post.link %>
              </p>
              <p class="preview-description">
                <%=post.linkPreview.description %>
              </p>
            </div>
          </div> 
        </a>
          <% } %>
          <p class="post-body"><%= post.content %></p>
           <%= post.community_id %>
        </div>        
        <div class="user-interactions">
          <div class="combined-score">
            <span class="material-symbols-outlined" onclick="boostPost('<%= post.id %>', '<%= user %>')">thumb_up</span>
            <div id="post-score-<%= post.id %>"><%= post.boosts - post.detracts %></div>
            <span class="material-symbols-outlined" onclick="detractPost('<%= post.id %>', '<%= user %>')">thumb_down</span>
          </div>
          <% if (user && user.username === post.user.username) { %>
            <div class="delete">
              <form
                action="/post/<%= post.id %>?_method=DELETE"
                method="POST"
              >
                <input type="hidden" name="_method" value="DELETE" />
                <a
                  href="#"
                  id="delete-post-button"
                  onclick="return confirmDeletion(this);"
                >
                  <span class="material-symbols-outlined"> delete </span>
                </a>
              </form>
            </div>
          <% } %>
        </div>
        <% if (user) { %>
          <form id="comment-form" action="/posts/<%= post.id %>/comments" method="POST">
            <div class="input-container">
              <textarea id="comment" name="comment" required maxlength="500" placeholder="Add a comment..." oninput="autoResizeTextarea(this)"></textarea>
              <button type="submit" class="fab">
                Submit
              </button>
            </div>
          </form>
          <% } %>          
      </div>

      <div class="comments-section">
        <% function renderComments(comments, level = 0) { %> 
          <% comments.forEach(comment =>
        { %>
          <% if (level == 0) { %>
        <div class="comment-with-replies"> 
          <% } %>
        <div class="comment">
          <div class="comment-content">

            <div class="repliers-avatar">
              <img src="<%= comment.user.avatar || '/img/default-avatar.png' %>" alt="Avatar" class="avatar" onerror="standby()" />
            </div>
            <a class="comment-user-info" href="/profile/<%= comment.user.username %>">
              <div class="repliers-info">
                <%= comment.user.username%></a> 
              </div>
              
              <p> to  </p> 
              
              <div class="repliees-avatar">
                <img src="<%= comment.parent_author.avatar || '/img/default-avatar.png' %>" alt="Avatar" class="avatar" onerror="standby()" />
              </div>
              <div class="repliees-info">
                <a class="comment-user-info" href="/profile/<%= comment.parent_author.username %>"> 
              </div>

                <%= comment.parent_author.username %></a>
            <span>&#183;</span>
              
            <% let commentDate = new Date(comment.created_at);
            let currentDate = new Date();
            let timeDifference = currentDate - commentDate;
            let minutes = Math.floor(timeDifference / 60000);
            let hours = Math.floor(minutes / 60);
            let days = Math.floor(hours / 24);
            let timeSinceComment = '';

            if (days > 0) {
              timeSinceComment = days + 'd ago';
            } else if (hours > 0) {
              timeSinceComment = hours +  'h ago';
            } else if (minutes > 0) {
              timeSinceComment = minutes + 'm ago';
            } else {
              timeSinceComment = 'Just now';
            }
            %>
            <span class="comment-timestamp"><%= timeSinceComment %></p>
          </div>
          <div class="comment-body">
            <%- linkify(comment.comment) %>
          </div>
          
          
          <% if (user) { %>
          <form
            action="/comments/<%= comment.id %>/replies"
            method="POST"
            class="reply-form"
            style="display: none"
          >
            <textarea name="comment" required></textarea>
            <button type="submit">Submit Reply</button>
          </form>
          <div class="user-actions">
            <div class="boosts">
              <span
                class="material-symbols-outlined"
                onclick="boostComment('<%= post.id %>', '<%= user %>')"
              >
                thumb_up
              </span>
            </div>
            <div class="score">
              <%= comment.boosts - comment.detracts %>
            </div>
            <div class="detracts">
              <span
                class="material-symbols-outlined"
                onclick="detractComment('<%= post.id %>', '<%= user %>')"
              >
                thumb_down
              </span>
            </div>
            <div class="replies">
            <a
              href="#"
              id="reply-button"
              onclick="showReplyForm('<%= comment.id %>', event)"
            >
              <span class="material-symbols-outlined">reply</span> Reply
            </a>
            </div>
            <div clas="delete">
              <% if (user.username === comment.user.username) { %>
                <form
                  id="delete-comment-form-<%= comment.id %>"
                  action="/comment/<%= comment.id %>?_method=DELETE"
                  method="POST"
                  onsubmit="return confirm('Are you sure you want to delete this comment?');"
                >
                  <input type="hidden" name="_method" value="DELETE" />
                  <a
                    href="#"
                    class="delete-comment-button-<%= comment.id %>"
                    onclick="document.getElementById('delete-comment-form-<%= comment.id %>').submit();"
                  >
                    <span class="material-symbols-outlined"> delete </span> Delete
                  </a>
                </form>
                <% } %>

            </div>
            
          </div>

          <% } %>  
          <div class="comment-chevron">
            <% if (comment.replies && comment.replies.length > 0) { %>
              <span class="material-symbols-outlined chevron" onclick="toggleNestedComments('<%= comment.id %>')">chevron_right</span>
              <span class="replies-count"><%= comment.replies.length %> <% if (comment.replies.length === 1) { %> reply <% } else { %> replies <% } %></span>
              </span>

              <% } %>
            </div>
          </div>
          
          
          <form
            id="reply-form-<%= comment.id %>"
            action="/comments/<%= comment.id %>/replies"
            method="POST"
            style="display: none"
          >
            <div class="input-container">
              <form onsubmit="submitForm('comment-form', event);">
                <textarea id="comment" name="comment" rows="4" required oninput="autoExpandTextarea(event)" maxlength="500"></textarea>
                <button type="submit" class="fab">
                  Submit
                </button>
              </form>
            </div>
          </form>

          <% if (comment.replies && comment.replies.length > 0) { %>
            <% var nestedLevel = level + 1; %>
            <% var divClass = 'nested-comment level-' + Math.min(nestedLevel, 6); %>
            <div class="<%= divClass %>" id="nested-comments-<%= comment.id %>" style="display: none;">
              <% renderComments(comment.replies, nestedLevel); %>
            </div>
          <% } %>
  
          <% if (level == 0) { %>
          </div>
          <% } %>
      <% }) %> 
    <% } %> 
    <% renderComments(post.comments); %>
  </div>

    <script>
      

function toggleNestedComments(commentId) {
    var nestedComments = document.getElementById('nested-comments-' + commentId);
    if (nestedComments.style.display === 'none') {
      nestedComments.style.display = 'block';
    } else {
      nestedComments.style.display = 'none';
    }
  }
      function detractPost(postId, user) {
        if (!user) {
          window.location.href = "/login"; // Redirect to the login page
          return; // Stop further execution
        }
        fetch(`/posts/${postId}/boost`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ user: user, action: "detract" }),
        })
          .then((response) => response.json())
          .then((data) => {
            console.log(data); // Console log the JSON response
            if (data.message === "Detract successful") {
              // Increase the detract count in the view
              const detractCountElement = document.getElementById(
                `post-detracts-${postId}`
              );
              detractCountElement.innerText =
                parseInt(detractCountElement.innerText) + 1;

              // Change color of trending down arrow
              const trendingDownElement = document.querySelector(
                `[onclick="detractPost('${postId}', '${user}')"]`
              );
              trendingDownElement.style.color = "red";

              // Check if the post was boosted by the user
              const boostCountElement = document.getElementById(
                `post-boosts-${postId}`
              );
              if (boostCountElement.innerText > 0) {
                const trendingUpElement = document.querySelector(
                  `[onclick="boostPost('${postId}', '${user}')"]`
                );
                trendingUpElement.style.color = "black";
                boostCountElement.innerText =
                  parseInt(boostCountElement.innerText) - 1;
              }
            } else if (data.message === "Detract removed") {
              // Decrease the detract count in the view
              const detractCountElement = document.getElementById(
                `post-detracts-${postId}`
              );
              detractCountElement.innerText =
                parseInt(detractCountElement.innerText) - 1;

              // Change color of trending down arrow back to black
              const trendingDownElement = document.querySelector(
                `[onclick="detractPost('${postId}', '${user}')"]`
              );
              trendingDownElement.style.color = "black";
            } else {
              // Handle error
            }
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      }

      function boostComment(commentId, user) {
        if (!user) {
          window.location.href = "/login"; // Redirect to the login page
          return; // Stop further execution
        }
        fetch(`/comments/${commentId}/boost`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ user: user, action: "boost" }),
        })
          .then((response) => response.json())
          .then((data) => {
            console.log(data); // Console log the JSON response
            if (data.message === "Boost successful") {
              // Increase the boost count in the view
              const boostCountElement = document.getElementById(
                `comment-boosts-${commentId}`
              );
              boostCountElement.innerText =
                parseInt(boostCountElement.innerText) + 1;

              // Change color of trending up arrow
              const trendingUpElement = document.querySelector(
                `[onclick="boostComment('${commentId}', '${user}')"]`
              );
              trendingUpElement.style.color = "green";

              // Check if the comment was detracted by the user
              const detractCountElement = document.getElementById(
                `comment-detracts-${commentId}`
              );
              if (detractCountElement.innerText > 0) {
                // Decrease the detract count in the view
                const trendingDownElement = document.querySelector(
                  `[onclick="detractComment('${commentId}', '${user}')"]`
                );
                trendingDownElement.style.color = "black";
                detractCountElement.innerText =
                  parseInt(detractCountElement.innerText) - 1;
              }
            } else if (data.message === "Boost removed") {
              // Decrease the boost count in the view
              const boostCountElement = document.getElementById(
                `comment-boosts-${commentId}`
              );
              boostCountElement.innerText =
                parseInt(boostCountElement.innerText) - 1;

              // Change color of trending up arrow back to black
              const trendingUpElement = document.querySelector(
                `[onclick="boostComment('${commentId}', '${user}')"]`
              );
              trendingUpElement.style.color = "black";
            } else {
              // Handle error
            }
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      }

      function detractComment(commentId, user) {
        if (!user) {
          window.location.href = "/login"; // Redirect to the login page
          return; // Stop further execution
        }
        fetch(`/comments/${commentId}/boost`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ user: user, action: "detract" }),
        })
          .then((response) => response.json())
          .then((data) => {
            console.log(data); // Console log the JSON response
            if (data.message === "Detract successful") {
              // Increase the detract count in the view
              const detractCountElement = document.getElementById(
                `comment-detracts-${commentId}`
              );
              detractCountElement.innerText =
                parseInt(detractCountElement.innerText) + 1;

              // Change color of trending down arrow
              const trendingDownElement = document.querySelector(
                `[onclick="detractComment('${commentId}', '${user}')"]`
              );
              trendingDownElement.style.color = "red";

              // Check if the comment was boosted by the user
              const boostCountElement = document.getElementById(
                `comment-boosts-${commentId}`
              );
              if (boostCountElement.innerText > 0) {
                const trendingUpElement = document.querySelector(
                  `[onclick="boostComment('${commentId}', '${user}')"]`
                );
                trendingUpElement.style.color = "black";
                boostCountElement.innerText =
                  parseInt(boostCountElement.innerText) - 1;
              }
            } else if (data.message === "Detract removed") {
              // Decrease the detract count in the view
              const detractCountElement = document.getElementById(
                `comment-detracts-${commentId}`
              );
              detractCountElement.innerText =
                parseInt(detractCountElement.innerText) - 1;

              // Change color of trending down arrow back to black
              const trendingDownElement = document.querySelector(
                `[onclick="detractComment('${commentId}', '${user}')"]`
              );
              trendingDownElement.style.color = "black";
            } else {
              // Handle error
            }
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      }

      function boostPost(postId, user) {
        if (!user) {
          window.location.href = "/login"; // Redirect to the login page
          return; // Stop further execution
        }
        fetch(`/posts/${postId}/boost`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ user: user, action: "boost" }),
        })
          .then((response) => response.json())
          .then((data) => {
            console.log(data); // Console log the JSON response
            if (data.message === "Boost successful") {
              // Increase the boost count in the view
              const boostCountElement = document.getElementById(
                `post-boosts-${postId}`
              );
              boostCountElement.innerText =
                parseInt(boostCountElement.innerText) + 1;

              // Change color of trending up arrow
              const trendingUpElement = document.querySelector(
                `[onclick="boostPost('${postId}', '${user}')"]`
              );
              trendingUpElement.style.color = "green";

              // Check if the post was detracted by the user
              const detractCountElement = document.getElementById(
                `post-detracts-${postId}`
              );
              if (detractCountElement.innerText > 0) {
                // Decrease the detract count in the view
                const trendingDownElement = document.querySelector(
                  `[onclick="detractPost('${postId}', '${user}')"]`
                );
                trendingDownElement.style.color = "black";
                detractCountElement.innerText =
                  parseInt(detractCountElement.innerText) - 1;
              }
            } else if (data.message === "Boost removed") {
              // Decrease the boost count in the view
              const boostCountElement = document.getElementById(
                `post-boosts-${postId}`
              );
              boostCountElement.innerText =
                parseInt(boostCountElement.innerText) - 1;

              // Change color of trending up arrow back to black
              const trendingUpElement = document.querySelector(
                `[onclick="boostPost('${postId}', '${user}')"]`
              );
              trendingUpElement.style.color = "black";
            } else {
              // Handle error
            }
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      }

      function submitForm(formId, event) {
        event.preventDefault();
        var form = document.getElementById(formId);

        if (!form) {
          console.error("Form not found: " + formId);
          return false;
        }

        var isReplyForm = formId.startsWith("reply-form");

        var inputField;
        if (isReplyForm) {
          inputField = form.querySelector("textarea");
        } else {
          inputField = form.querySelector('input[name="comment"]');
        }

        // Check if the input field or textarea exists
        if (!inputField) {
          console.error("Input field not found in form: " + formId);
          return false;
        }

        // Validate input value
        if (inputField.value.trim() === "") {
          alert("Your message cannot be empty.");
          return false;
        } else {
          // Submit the form
          form.submit();
        }
      }

      function showReplyForm(commentId, event) {
        event.preventDefault();
        var form = document.getElementById("reply-form-" + commentId);
        form.style.display = form.style.display === "none" ? "block" : "none";
      }
      function confirmDeletion(element) {
    if (confirm('Are you sure you want to delete this post?')) {
      element.closest('form').submit();
    }
    return false;
  }
  function standby() {
    document.getElementById('avatar').src = "/img/default-avatar.png"
  }

  function autoExpandTextarea(event) {
    event.target.style.height = 'inherit';
    event.target.style.height = `${event.target.scrollHeight}px`;
  }

  document.getElementById('comment').addEventListener('input', autoExpandTextarea);
    </script>
  </body>
</html>
